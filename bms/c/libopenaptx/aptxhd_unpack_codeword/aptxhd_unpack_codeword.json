{"Includes": ["#include <stdint.h>\n", "#include <stdlib.h>\n", "#include <string.h>\n"], "Defines": ["#define NB_FILTERS 2\n", "#define NB_SUBBANDS 4\n", "#define FILTER_TAPS 16\n"], "TypeDefs": [], "Globals": [], "Structs": ["struct aptx_filter_signal {\n    int32_t buffer[2*FILTER_TAPS];\n    uint8_t pos;\n};", "struct aptx_prediction {\n    int32_t prev_sign[2];\n    int32_t s_weight[2];\n    int32_t d_weight[24];\n    int32_t pos;\n    int32_t reconstructed_differences[48];\n    int32_t previous_reconstructed_sample;\n    int32_t predicted_difference;\n    int32_t predicted_sample;\n};", "struct aptx_invert_quantize {\n    int32_t quantization_factor;\n    int32_t factor_select;\n    int32_t reconstructed_difference;\n};", "struct aptx_quantize {\n    int32_t quantized_sample;\n    int32_t quantized_sample_parity_change;\n    int32_t error;\n};", "struct aptx_QMF_analysis {\n    struct aptx_filter_signal outer_filter_signal[NB_FILTERS];\n    struct aptx_filter_signal inner_filter_signal[NB_FILTERS][NB_FILTERS];\n};", "struct aptx_channel {\n    int32_t codeword_history;\n    int32_t dither_parity;\n    int32_t dither[NB_SUBBANDS];\n\n    struct aptx_QMF_analysis qmf;\n    struct aptx_quantize quantize[NB_SUBBANDS];\n    struct aptx_invert_quantize invert_quantize[NB_SUBBANDS];\n    struct aptx_prediction prediction[NB_SUBBANDS];\n};"], "Function Declarations": ["static int32_t aptx_quantized_parity(const struct aptx_channel *channel)\n;", "static inline int32_t sign_extend(int32_t val, unsigned bits)\n;", "static void aptxhd_unpack_codeword(struct aptx_channel *channel, uint32_t codeword)\n;"], "Function Implementations": ["static int32_t aptx_quantized_parity(const struct aptx_channel *channel)\n{\n    int32_t parity = channel->dither_parity;\n    unsigned subband;\n\n    for (subband = 0; subband < NB_SUBBANDS; subband++)\n        parity ^= channel->quantize[subband].quantized_sample;\n\n    return parity & 1;\n}", "static inline int32_t sign_extend(int32_t val, unsigned bits)\n{\n    const unsigned shift = 8 * sizeof(val) - bits;\n    union { uint32_t u; int32_t s; } v;\n    v.u = (uint32_t)val << shift;\n    return v.s >> shift;\n}", "static void aptxhd_unpack_codeword(struct aptx_channel *channel, uint32_t codeword)\n{\n    channel->quantize[0].quantized_sample = sign_extend((int32_t)(codeword >>  0), 9);\n    channel->quantize[1].quantized_sample = sign_extend((int32_t)(codeword >>  9), 6);\n    channel->quantize[2].quantized_sample = sign_extend((int32_t)(codeword >> 15), 4);\n    channel->quantize[3].quantized_sample = sign_extend((int32_t)(codeword >> 19), 5);\n    channel->quantize[3].quantized_sample = (channel->quantize[3].quantized_sample & ~1)\n                                          | aptx_quantized_parity(channel);\n}"], "Enums": []}