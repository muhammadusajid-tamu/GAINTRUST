{"Includes": ["#include <stdint.h>\n", "#include <stdlib.h>\n", "#include <string.h>\n"], "Defines": ["#define NB_FILTERS 2\n", "#define NB_SUBBANDS 4\n", "#define FILTER_TAPS 16\n"], "TypeDefs": [], "Globals": [], "Structs": ["struct aptx_filter_signal {\n    int32_t buffer[2*FILTER_TAPS];\n    uint8_t pos;\n};", "struct aptx_prediction {\n    int32_t prev_sign[2];\n    int32_t s_weight[2];\n    int32_t d_weight[24];\n    int32_t pos;\n    int32_t reconstructed_differences[48];\n    int32_t previous_reconstructed_sample;\n    int32_t predicted_difference;\n    int32_t predicted_sample;\n};", "struct aptx_invert_quantize {\n    int32_t quantization_factor;\n    int32_t factor_select;\n    int32_t reconstructed_difference;\n};", "struct aptx_quantize {\n    int32_t quantized_sample;\n    int32_t quantized_sample_parity_change;\n    int32_t error;\n};", "struct aptx_QMF_analysis {\n    struct aptx_filter_signal outer_filter_signal[NB_FILTERS];\n    struct aptx_filter_signal inner_filter_signal[NB_FILTERS][NB_FILTERS];\n};", "struct aptx_channel {\n    int32_t codeword_history;\n    int32_t dither_parity;\n    int32_t dither[NB_SUBBANDS];\n\n    struct aptx_QMF_analysis qmf;\n    struct aptx_quantize quantize[NB_SUBBANDS];\n    struct aptx_invert_quantize invert_quantize[NB_SUBBANDS];\n    struct aptx_prediction prediction[NB_SUBBANDS];\n};"], "Function Declarations": ["static inline void aptx_update_codeword_history(struct aptx_channel *channel)\n;", "static void aptx_generate_dither(struct aptx_channel *channel)\n;"], "Function Implementations": ["static inline void aptx_update_codeword_history(struct aptx_channel *channel)\n{\n    const int32_t cw = ((channel->quantize[0].quantized_sample & 3) << 0) +\n                       ((channel->quantize[1].quantized_sample & 2) << 1) +\n                       ((channel->quantize[2].quantized_sample & 1) << 3);\n    channel->codeword_history = (cw << 8) + (int32_t)((uint32_t)channel->codeword_history << 4);\n}", "static void aptx_generate_dither(struct aptx_channel *channel)\n{\n    unsigned subband;\n    int64_t m;\n    int32_t d;\n\n    aptx_update_codeword_history(channel);\n\n    m = (int64_t)5184443 * (channel->codeword_history >> 7);\n    d = (int32_t)((m * 4) + (m >> 22));\n    for (subband = 0; subband < NB_SUBBANDS; subband++)\n        channel->dither[subband] = (int32_t)((uint32_t)d << (23 - 5*subband));\n    channel->dither_parity = (d >> 25) & 1;\n}"], "Enums": []}