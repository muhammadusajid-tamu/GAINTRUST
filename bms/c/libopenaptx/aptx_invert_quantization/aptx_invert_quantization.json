{"Includes": ["#include <stdint.h>\n", "#include <stdlib.h>\n", "#include <string.h>\n"], "Defines": [], "TypeDefs": [], "Globals": ["static const int16_t quantization_factors[32] = {\n    2048, 2093, 2139, 2186, 2233, 2282, 2332, 2383,\n    2435, 2489, 2543, 2599, 2656, 2714, 2774, 2834,\n    2896, 2960, 3025, 3091, 3158, 3228, 3298, 3371,\n    3444, 3520, 3597, 3676, 3756, 3838, 3922, 4008,\n};"], "Structs": ["struct aptx_tables {\n    const int32_t *quantize_intervals;\n    const int32_t *invert_quantize_dither_factors;\n    const int32_t *quantize_dither_factors;\n    const int16_t *quantize_factor_select_offset;\n    int tables_size;\n    int32_t factor_max;\n    int prediction_order;\n};", "struct aptx_invert_quantize {\n    int32_t quantization_factor;\n    int32_t factor_select;\n    int32_t reconstructed_difference;\n};"], "Function Declarations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n;", "static inline int64_t rshift64(int64_t value, unsigned shift) ;", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) ;", "static inline int32_t rshift32(int32_t value, unsigned shift) ;", "static inline int32_t clip(int32_t a, int32_t amin, int32_t amax)\n;", "static void aptx_invert_quantization(struct aptx_invert_quantize *invert_quantize,\n                                     int32_t quantized_sample, int32_t dither,\n                                     const struct aptx_tables *tables)\n;"], "Function Implementations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n{\n    if (((uint32_t)a + ((uint32_t)1 << p)) & ~(((uint32_t)2 << p) - 1))\n        return (a >> 31) ^ ((1 << p) - 1);\n    else\n        return a;\n}", "static inline int64_t rshift64(int64_t value, unsigned shift) { const int64_t rounding = (int64_t)1 << (shift - 1); const int64_t mask = ((int64_t)1 << (shift + 1)) - 1; return ((value + rounding) >> shift) - ((value & mask) == rounding); }", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) { return clip_intp2((int32_t)rshift64(value, shift), 23); }", "static inline int32_t rshift32(int32_t value, unsigned shift) { const int32_t rounding = (int32_t)1 << (shift - 1); const int32_t mask = ((int32_t)1 << (shift + 1)) - 1; return ((value + rounding) >> shift) - ((value & mask) == rounding); }", "static inline int32_t clip(int32_t a, int32_t amin, int32_t amax)\n{\n    if      (a < amin) return amin;\n    else if (a > amax) return amax;\n    else               return a;\n}", "static void aptx_invert_quantization(struct aptx_invert_quantize *invert_quantize,\n                                     int32_t quantized_sample, int32_t dither,\n                                     const struct aptx_tables *tables)\n{\n    int32_t qr, idx, shift, factor_select;\n\n    idx = (quantized_sample ^ -(quantized_sample < 0)) + 1;\n    qr = tables->quantize_intervals[idx] / 2;\n    if (quantized_sample < 0)\n        qr = -qr;\n\n    qr = rshift64_clip24(((int64_t)qr * ((int64_t)1<<32)) + (int64_t)dither * (int64_t)tables->invert_quantize_dither_factors[idx], 32);\n    invert_quantize->reconstructed_difference = (int32_t)(((int64_t)invert_quantize->quantization_factor * (int64_t)qr) >> 19);\n\n    /* update factor_select */\n    factor_select = 32620 * invert_quantize->factor_select;\n    factor_select = rshift32(factor_select + (tables->quantize_factor_select_offset[idx] * (1 << 15)), 15);\n    invert_quantize->factor_select = clip(factor_select, 0, tables->factor_max);\n\n    /* update quantization factor */\n    idx = (invert_quantize->factor_select & 0xFF) >> 3;\n    shift = (tables->factor_max - invert_quantize->factor_select) >> 8;\n    invert_quantize->quantization_factor = (quantization_factors[idx] << 11) >> shift;\n}"], "Enums": []}