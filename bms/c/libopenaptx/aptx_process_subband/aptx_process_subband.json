{"Includes": ["#include <stdint.h>\n", "#include <stdlib.h>\n", "#include <string.h>\n"], "Defines": ["#define DIFFSIGN(x,y) (((x)>(y)) - ((x)<(y)))\n"], "TypeDefs": [], "Globals": ["static const int16_t quantization_factors[32] = {\n    2048, 2093, 2139, 2186, 2233, 2282, 2332, 2383,\n    2435, 2489, 2543, 2599, 2656, 2714, 2774, 2834,\n    2896, 2960, 3025, 3091, 3158, 3228, 3298, 3371,\n    3444, 3520, 3597, 3676, 3756, 3838, 3922, 4008,\n};"], "Structs": ["struct aptx_tables {\n    const int32_t *quantize_intervals;\n    const int32_t *invert_quantize_dither_factors;\n    const int32_t *quantize_dither_factors;\n    const int16_t *quantize_factor_select_offset;\n    int tables_size;\n    int32_t factor_max;\n    int prediction_order;\n};", "struct aptx_prediction {\n    int32_t prev_sign[2];\n    int32_t s_weight[2];\n    int32_t d_weight[24];\n    int32_t pos;\n    int32_t reconstructed_differences[48];\n    int32_t previous_reconstructed_sample;\n    int32_t predicted_difference;\n    int32_t predicted_sample;\n};", "struct aptx_invert_quantize {\n    int32_t quantization_factor;\n    int32_t factor_select;\n    int32_t reconstructed_difference;\n};"], "Function Declarations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n;", "static inline int64_t rshift64(int64_t value, unsigned shift) ;", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) ;", "static inline int32_t rshift32(int32_t value, unsigned shift) ;", "static int32_t *aptx_reconstructed_differences_update(struct aptx_prediction *prediction,\n                                                      int32_t reconstructed_difference,\n                                                      int order)\n;", "static inline int32_t clip(int32_t a, int32_t amin, int32_t amax)\n;", "static void aptx_prediction_filtering(struct aptx_prediction *prediction,\n                                      int32_t reconstructed_difference,\n                                      int order)\n;", "static void aptx_invert_quantization(struct aptx_invert_quantize *invert_quantize,\n                                     int32_t quantized_sample, int32_t dither,\n                                     const struct aptx_tables *tables)\n;", "static void aptx_process_subband(struct aptx_invert_quantize *invert_quantize,\n                                 struct aptx_prediction *prediction,\n                                 int32_t quantized_sample, int32_t dither,\n                                 const struct aptx_tables *tables)\n;"], "Function Implementations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n{\n    if (((uint32_t)a + ((uint32_t)1 << p)) & ~(((uint32_t)2 << p) - 1))\n        return (a >> 31) ^ ((1 << p) - 1);\n    else\n        return a;\n}", "static inline int64_t rshift64(int64_t value, unsigned shift) { const int64_t rounding = (int64_t)1 << (shift - 1); const int64_t mask = ((int64_t)1 << (shift + 1)) - 1; return ((value + rounding) >> shift) - ((value & mask) == rounding); }", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) { return clip_intp2((int32_t)rshift64(value, shift), 23); }", "static inline int32_t rshift32(int32_t value, unsigned shift) { const int32_t rounding = (int32_t)1 << (shift - 1); const int32_t mask = ((int32_t)1 << (shift + 1)) - 1; return ((value + rounding) >> shift) - ((value & mask) == rounding); }", "static int32_t *aptx_reconstructed_differences_update(struct aptx_prediction *prediction,\n                                                      int32_t reconstructed_difference,\n                                                      int order)\n{\n    int32_t *rd1 = prediction->reconstructed_differences, *rd2 = rd1 + order;\n    int p = prediction->pos;\n\n    rd1[p] = rd2[p];\n    prediction->pos = p = (p + 1) % order;\n    rd2[p] = reconstructed_difference;\n    return &rd2[p];\n}", "static inline int32_t clip(int32_t a, int32_t amin, int32_t amax)\n{\n    if      (a < amin) return amin;\n    else if (a > amax) return amax;\n    else               return a;\n}", "static void aptx_prediction_filtering(struct aptx_prediction *prediction,\n                                      int32_t reconstructed_difference,\n                                      int order)\n{\n    int32_t reconstructed_sample, predictor, srd0, srd;\n    int32_t *reconstructed_differences;\n    int64_t predicted_difference = 0;\n    int i;\n\n    reconstructed_sample = clip_intp2(reconstructed_difference + prediction->predicted_sample, 23);\n    predictor = clip_intp2((int32_t)(((int64_t)prediction->s_weight[0] * (int64_t)prediction->previous_reconstructed_sample\n                                    + (int64_t)prediction->s_weight[1] * (int64_t)reconstructed_sample) >> 22), 23);\n    prediction->previous_reconstructed_sample = reconstructed_sample;\n\n    reconstructed_differences = aptx_reconstructed_differences_update(prediction, reconstructed_difference, order);\n    srd0 = (int32_t)DIFFSIGN(reconstructed_difference, 0) * ((int32_t)1 << 23);\n    for (i = 0; i < order; i++) {\n        srd = (reconstructed_differences[-i-1] >> 31) | 1;\n        prediction->d_weight[i] -= rshift32(prediction->d_weight[i] - srd*srd0, 8);\n        predicted_difference += (int64_t)reconstructed_differences[-i] * (int64_t)prediction->d_weight[i];\n    }\n\n    prediction->predicted_difference = clip_intp2((int32_t)(predicted_difference >> 22), 23);\n    prediction->predicted_sample = clip_intp2(predictor + prediction->predicted_difference, 23);\n}", "static void aptx_invert_quantization(struct aptx_invert_quantize *invert_quantize,\n                                     int32_t quantized_sample, int32_t dither,\n                                     const struct aptx_tables *tables)\n{\n    int32_t qr, idx, shift, factor_select;\n\n    idx = (quantized_sample ^ -(quantized_sample < 0)) + 1;\n    qr = tables->quantize_intervals[idx] / 2;\n    if (quantized_sample < 0)\n        qr = -qr;\n\n    qr = rshift64_clip24(((int64_t)qr * ((int64_t)1<<32)) + (int64_t)dither * (int64_t)tables->invert_quantize_dither_factors[idx], 32);\n    invert_quantize->reconstructed_difference = (int32_t)(((int64_t)invert_quantize->quantization_factor * (int64_t)qr) >> 19);\n\n    /* update factor_select */\n    factor_select = 32620 * invert_quantize->factor_select;\n    factor_select = rshift32(factor_select + (tables->quantize_factor_select_offset[idx] * (1 << 15)), 15);\n    invert_quantize->factor_select = clip(factor_select, 0, tables->factor_max);\n\n    /* update quantization factor */\n    idx = (invert_quantize->factor_select & 0xFF) >> 3;\n    shift = (tables->factor_max - invert_quantize->factor_select) >> 8;\n    invert_quantize->quantization_factor = (quantization_factors[idx] << 11) >> shift;\n}", "static void aptx_process_subband(struct aptx_invert_quantize *invert_quantize,\n                                 struct aptx_prediction *prediction,\n                                 int32_t quantized_sample, int32_t dither,\n                                 const struct aptx_tables *tables)\n{\n    int32_t sign, same_sign[2], weight[2], sw1, range;\n\n    aptx_invert_quantization(invert_quantize, quantized_sample, dither, tables);\n\n    sign = DIFFSIGN(invert_quantize->reconstructed_difference,\n                    -prediction->predicted_difference);\n    same_sign[0] = sign * prediction->prev_sign[0];\n    same_sign[1] = sign * prediction->prev_sign[1];\n    prediction->prev_sign[0] = prediction->prev_sign[1];\n    prediction->prev_sign[1] = sign | 1;\n\n    range = 0x100000;\n    sw1 = rshift32(-same_sign[1] * prediction->s_weight[1], 1);\n    sw1 = (clip(sw1, -range, range) & ~0xF) * 16;\n\n    range = 0x300000;\n    weight[0] = 254 * prediction->s_weight[0] + 0x800000*same_sign[0] + sw1;\n    prediction->s_weight[0] = clip(rshift32(weight[0], 8), -range, range);\n\n    range = 0x3C0000 - prediction->s_weight[0];\n    weight[1] = 255 * prediction->s_weight[1] + 0xC00000*same_sign[1];\n    prediction->s_weight[1] = clip(rshift32(weight[1], 8), -range, range);\n\n    aptx_prediction_filtering(prediction,\n                              invert_quantize->reconstructed_difference,\n                              tables->prediction_order);\n}"], "Enums": []}