{"Includes": ["#include <stdint.h>\n", "#include <stdlib.h>\n", "#include <string.h>\n"], "Defines": [], "TypeDefs": [], "Globals": [], "Structs": ["struct aptx_tables {\n    const int32_t *quantize_intervals;\n    const int32_t *invert_quantize_dither_factors;\n    const int32_t *quantize_dither_factors;\n    const int16_t *quantize_factor_select_offset;\n    int tables_size;\n    int32_t factor_max;\n    int prediction_order;\n};", "struct aptx_quantize {\n    int32_t quantized_sample;\n    int32_t quantized_sample_parity_change;\n    int32_t error;\n};"], "Function Declarations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n;", "static inline int64_t rshift64(int64_t value, unsigned shift) ;", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) ;", "static inline int32_t rshift32(int32_t value, unsigned shift) ;", "static inline int32_t rshift32_clip24(int32_t value, unsigned shift) ;", "static inline int32_t aptx_bin_search(int32_t value, int32_t factor,\n                                      const int32_t *intervals, int nb_intervals)\n;", "static void aptx_quantize_difference(struct aptx_quantize *quantize,\n                                     int32_t sample_difference,\n                                     int32_t dither,\n                                     int32_t quantization_factor,\n                                     const struct aptx_tables *tables)\n;"], "Function Implementations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n{\n    if (((uint32_t)a + ((uint32_t)1 << p)) & ~(((uint32_t)2 << p) - 1))\n        return (a >> 31) ^ ((1 << p) - 1);\n    else\n        return a;\n}", "static inline int64_t rshift64(int64_t value, unsigned shift) { const int64_t rounding = (int64_t)1 << (shift - 1); const int64_t mask = ((int64_t)1 << (shift + 1)) - 1; return ((value + rounding) >> shift) - ((value & mask) == rounding); }", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) { return clip_intp2((int32_t)rshift64(value, shift), 23); }", "static inline int32_t rshift32(int32_t value, unsigned shift) { const int32_t rounding = (int32_t)1 << (shift - 1); const int32_t mask = ((int32_t)1 << (shift + 1)) - 1; return ((value + rounding) >> shift) - ((value & mask) == rounding); }", "static inline int32_t rshift32_clip24(int32_t value, unsigned shift) { return clip_intp2((int32_t)rshift32(value, shift), 23); }", "static inline int32_t aptx_bin_search(int32_t value, int32_t factor,\n                                      const int32_t *intervals, int nb_intervals)\n{\n    int32_t idx = 0;\n    int i;\n\n    for (i = nb_intervals >> 1; i > 0; i >>= 1)\n        if ((int64_t)factor * (int64_t)intervals[idx + i] <= ((int64_t)value << 24))\n            idx += i;\n\n    return idx;\n}", "static void aptx_quantize_difference(struct aptx_quantize *quantize,\n                                     int32_t sample_difference,\n                                     int32_t dither,\n                                     int32_t quantization_factor,\n                                     const struct aptx_tables *tables)\n{\n    const int32_t *intervals = tables->quantize_intervals;\n    int32_t quantized_sample, dithered_sample, parity_change;\n    int32_t d, mean, interval, inv, sample_difference_abs;\n    int64_t error;\n\n    sample_difference_abs = sample_difference;\n    if (sample_difference_abs < 0)\n        sample_difference_abs = -sample_difference_abs;\n    if (sample_difference_abs > ((int32_t)1 << 23) - 1)\n        sample_difference_abs = ((int32_t)1 << 23) - 1;\n\n    quantized_sample = aptx_bin_search(sample_difference_abs >> 4,\n                                       quantization_factor,\n                                       intervals, tables->tables_size);\n\n    d = rshift32_clip24((int32_t)(((int64_t)dither * (int64_t)dither) >> 32), 7) - ((int32_t)1 << 23);\n    d = (int32_t)rshift64((int64_t)d * (int64_t)tables->quantize_dither_factors[quantized_sample], 23);\n\n    intervals += quantized_sample;\n    mean = (intervals[1] + intervals[0]) / 2;\n    interval = (intervals[1] - intervals[0]) * (-(sample_difference < 0) | 1);\n\n    dithered_sample = rshift64_clip24((int64_t)dither * (int64_t)interval + ((int64_t)clip_intp2(mean + d, 23) << 32), 32);\n    error = ((int64_t)sample_difference_abs << 20) - (int64_t)dithered_sample * (int64_t)quantization_factor;\n    quantize->error = (int32_t)rshift64(error, 23);\n    if (quantize->error < 0)\n        quantize->error = -quantize->error;\n\n    parity_change = quantized_sample;\n    if (error < 0)\n        quantized_sample--;\n    else\n        parity_change--;\n\n    inv = -(sample_difference < 0);\n    quantize->quantized_sample               = quantized_sample ^ inv;\n    quantize->quantized_sample_parity_change = parity_change    ^ inv;\n}"], "Enums": []}