{"Includes": ["#include <stdio.h>\n", "#include <stdint.h>\n", "#include <stdlib.h> /* calloc() */\n", "#include <string.h> /* strdup() */\n"], "Defines": ["#define OPL_EMU_REGISTERS_WAVEFORMS 8\n", "#define OPL_EMU_REGISTERS_REGISTERS 0x200\n", "#define OPL_EMU_REGISTERS_WAVEFORM_LENGTH 0x400\n"], "TypeDefs": [], "Globals": [], "Structs": ["struct opl_emu_registers\n{\n\t// internal state\n\tuint16_t m_lfo_am_counter;            // LFO AM counter\n\tuint16_t m_lfo_pm_counter;            // LFO PM counter\n\tuint32_t m_noise_lfsr;                // noise LFSR state\n\tuint8_t m_lfo_am;                     // current LFO AM value\n\tuint8_t m_regdata[OPL_EMU_REGISTERS_REGISTERS];         // register data\n\tuint16_t m_waveform[OPL_EMU_REGISTERS_WAVEFORMS][OPL_EMU_REGISTERS_WAVEFORM_LENGTH]; // waveforms\n};", "struct opl_emu_opdata_cache\n{\n\t// set phase_step to this value to recalculate it each sample; needed\n\t// in the case of PM LFO changes\n\n\tuint32_t phase_step;              // phase step, or OPL_EMU_PHASE_STEP_DYNAMIC if PM is active\n\tuint32_t total_level;             // total level * 8 + KSL\n\tuint32_t block_freq;              // raw block frequency value (used to compute phase_step)\n\tint32_t detune;                   // detuning value (used to compute phase_step)\n\tuint32_t multiple;                // multiple value (x.1, used to compute phase_step)\n\tuint32_t eg_sustain;              // sustain level, shifted up to envelope values\n\tuint8_t eg_rate[OPL_EMU_EG_STATES];       // envelope rate, including KSR\n\tuint8_t eg_shift;                 // envelope shift amount\n};", "struct opl_emu_fm_operator\n{\n\t// internal state\n\tuint32_t m_choffs;                     // channel offset in registers\n\tuint32_t m_opoffs;                     // operator offset in registers\n\tuint32_t m_phase;                      // current phase value (10.10 format)\n\tuint16_t m_env_attenuation;            // computed envelope attenuation (4.6 format)\n\tenum opl_emu_envelope_state m_env_state;            // current envelope state\n\tuint8_t m_key_state;                   // current key state: on or off (bit 0)\n\tuint8_t m_keyon_live;                  // live key on state (bit 0 = direct, bit 1 = rhythm, bit 2 = CSM)\n\tstruct opl_emu_opdata_cache m_cache;                  // cached values for performance\n\tstruct opl_emu_registers* m_regs;                  // direct reference to registers\n};"], "Function Declarations": ["void opl_emu_fm_operator_start_release(struct opl_emu_fm_operator* fmop)\n;", "void opl_emu_fm_operator_start_attack(struct opl_emu_fm_operator* fmop)\n;", "void opl_emu_fm_operator_clock_keystate(struct opl_emu_fm_operator* fmop, uint32_t keystate)\n;"], "Function Implementations": ["void opl_emu_fm_operator_start_release(struct opl_emu_fm_operator* fmop)\n{\n\t// don't change anything if already in release state\n\tif (fmop->m_env_state >= OPL_EMU_EG_RELEASE)\n\t\treturn;\n\tfmop->m_env_state = OPL_EMU_EG_RELEASE;\n}", "void opl_emu_fm_operator_start_attack(struct opl_emu_fm_operator* fmop)\n{\n\t// don't change anything if already in attack state\n\tif (fmop->m_env_state == OPL_EMU_EG_ATTACK)\n\t\treturn;\n\tfmop->m_env_state = OPL_EMU_EG_ATTACK;\n\n\t// reset the phase when we start an attack due to a key on\n    fmop->m_phase = 0;\n\n\t// if the attack rate >= 62 then immediately go to max attenuation\n\tif (fmop->m_cache.eg_rate[OPL_EMU_EG_ATTACK] >= 62)\n\t\tfmop->m_env_attenuation = 0;\n}", "void opl_emu_fm_operator_clock_keystate(struct opl_emu_fm_operator* fmop, uint32_t keystate)\n{\n\t// has the key changed?\n\tif ((keystate ^ fmop->m_key_state) != 0)\n\t{\n\t\tfmop->m_key_state = keystate;\n\n\t\t// if the key has turned on, start the attack\n\t\tif (keystate != 0)\n\t\t{\n            opl_emu_fm_operator_start_attack(fmop);\n\t\t}\n\n\t\t// otherwise, start the release\n\t\telse\n\t\t\topl_emu_fm_operator_start_release(fmop);\n\t}\n}"], "Enums": ["enum opl_emu_envelope_state\n{\n\tOPL_EMU_EG_ATTACK = 1,\n\tOPL_EMU_EG_DECAY = 2,\n\tOPL_EMU_EG_SUSTAIN = 3,\n\tOPL_EMU_EG_RELEASE = 4,\n\tOPL_EMU_EG_STATES = 6\n};"]}