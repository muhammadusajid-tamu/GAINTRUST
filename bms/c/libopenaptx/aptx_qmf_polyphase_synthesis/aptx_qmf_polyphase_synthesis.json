{"Includes": ["#include <stdint.h>\n", "#include <stdlib.h>\n", "#include <string.h>\n"], "Defines": ["#define NB_FILTERS 2\n", "#define FILTER_TAPS 16\n"], "TypeDefs": [], "Globals": [], "Structs": ["struct aptx_filter_signal {\n    int32_t buffer[2*FILTER_TAPS];\n    uint8_t pos;\n};"], "Function Declarations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n;", "static inline int64_t rshift64(int64_t value, unsigned shift) ;", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) ;", "static inline int32_t aptx_qmf_convolution(const struct aptx_filter_signal *signal,\n                                           const int32_t coeffs[FILTER_TAPS],\n                                           unsigned shift)\n;", "static inline void aptx_qmf_filter_signal_push(struct aptx_filter_signal *signal,\n                                               int32_t sample)\n;", "static inline void aptx_qmf_polyphase_synthesis(struct aptx_filter_signal signal[NB_FILTERS],\n                                                const int32_t coeffs[NB_FILTERS][FILTER_TAPS],\n                                                unsigned shift,\n                                                int32_t low_subband_input,\n                                                int32_t high_subband_input,\n                                                int32_t samples[NB_FILTERS])\n;"], "Function Implementations": ["static inline int32_t clip_intp2(int32_t a, unsigned p)\n{\n    if (((uint32_t)a + ((uint32_t)1 << p)) & ~(((uint32_t)2 << p) - 1))\n        return (a >> 31) ^ ((1 << p) - 1);\n    else\n        return a;\n}", "static inline int64_t rshift64(int64_t value, unsigned shift) { const int64_t rounding = (int64_t)1 << (shift - 1); const int64_t mask = ((int64_t)1 << (shift + 1)) - 1; return ((value + rounding) >> shift) - ((value & mask) == rounding); }", "static inline int32_t rshift64_clip24(int64_t value, unsigned shift) { return clip_intp2((int32_t)rshift64(value, shift), 23); }", "static inline int32_t aptx_qmf_convolution(const struct aptx_filter_signal *signal,\n                                           const int32_t coeffs[FILTER_TAPS],\n                                           unsigned shift)\n{\n    const int32_t *sig = &signal->buffer[signal->pos];\n    int64_t e = 0;\n    unsigned i;\n\n    for (i = 0; i < FILTER_TAPS; i++)\n        e += (int64_t)sig[i] * (int64_t)coeffs[i];\n\n    return rshift64_clip24(e, shift);\n}", "static inline void aptx_qmf_filter_signal_push(struct aptx_filter_signal *signal,\n                                               int32_t sample)\n{\n    signal->buffer[signal->pos            ] = sample;\n    signal->buffer[signal->pos+FILTER_TAPS] = sample;\n    signal->pos = (signal->pos + 1) & (FILTER_TAPS - 1);\n}", "static inline void aptx_qmf_polyphase_synthesis(struct aptx_filter_signal signal[NB_FILTERS],\n                                                const int32_t coeffs[NB_FILTERS][FILTER_TAPS],\n                                                unsigned shift,\n                                                int32_t low_subband_input,\n                                                int32_t high_subband_input,\n                                                int32_t samples[NB_FILTERS])\n{\n    int32_t subbands[NB_FILTERS];\n    unsigned i;\n\n    subbands[0] = low_subband_input + high_subband_input;\n    subbands[1] = low_subband_input - high_subband_input;\n\n    for (i = 0; i < NB_FILTERS; i++) {\n        aptx_qmf_filter_signal_push(&signal[i], subbands[1-i]);\n        samples[i] = aptx_qmf_convolution(&signal[i], coeffs[i], shift);\n    }\n}"], "Enums": []}