# Overview
This artifact is for PC members to inspect only. A fully functional artifact will be submitted to the Artifact Evaluation track on acceptance of the publication.

This artifact contains the following:
- The implementation of our end-to-end translation tool Flourine
- The benchmarks used in our paper
- The final LLM translations for each of our 8160 experiments
- A csv table containing the the results of each of the 8160 individual experiments, which can be used to regenerate the figures and statistics in the paper 

In addition, detailed logs of the experiments can be downloaded at: https://d34gtk3knhjgeg.cloudfront.net/translations.tar.gz
These logs total 19GB uncompressed, and contain:
- the final transpilation produced by the LLMs
- the prompts sent to the LLMs and the responses
- the full Clippy output

The code for extracting benchmarks is built on open source libraries which may reveal our identities, so we have not included it in this artifact. This code will be released on acceptance and included in the artifact submitted to the artifact evaluation track.

Details of each item are given below.

## Flourine implementation
Flourine is implemented in the python files in this directory and the Rust/C/Go code under Differential_Tester.
Below are details on each of the files.
- drivery.py: the main entry point for Flourine
- transpiler.py: code for obtaining the initial transpilation from the LLM. 
- fixer.py: code for fixing compilation errors in the initial transpilation
- oracle.py: code that invokes the fuzzer
- llms.py: code that handles correctly formatting the prompts different LLMs
- semantics.py: code that implements feedback strategies
- Differential_Fuzzer/: the code for the fuzzer

## Benchmarks
The benchmarks used in our work are located under ./bms. Each individual source file is a benchmark. Statistics (e.g. loc, number of functions) is stored in all_statistics/benchmarks.csv.

## Final Translations
The final translations are located under ./translations, which has two sub directories success/ and fail/. The paths under these sub directories have the following format: <language>/<project>/<benchmark>/<llm>/<feedback-strategy>/, which each contain a single rust file corresponding to the translation.

## Detailed Translation Logs
In addition, we provide detailed translation logs for each individual translation experiment, which can be downloaded from https://d34gtk3knhjgeg.cloudfront.net/translations.tar.gz.
The unzipped tarball contains a directory with the same structure as the final translations, but with the following files for each experiment:
- results/ : contains the final translation and original source program
- wspace_clippy/clippy_*.out : The output for different clippy warnings
- wspace/logs/prog_*.ans : the prompts used to obtain transpilations, fix compilation errors, and fix counterexamples


## Result table
A summary of the result for each experiment is in all_statistics/new_big_table.csv. Each row corresponds to an individual translation experiment. It has the following columns:
- language
- project
- benchmark_name
- llm
- feedback_strategy
- final_status: either "Success" or "Fail". "Success" we found a translation that passed the oracle. "Fail" means a translation was not found for one of several reasons.
- status_detail: a more detailed reason for "Fail". Possible values are:
	- "Did not compile" 
	- "Initial Oracle OOS", "Oracle Somtimes OOS", "Oracle Always OOS": these mean that the fuzzer could not map data between languages, usually because of serialization issues
	- "Pending", "Crash": these mean that Flourine crashed while invoking the LLM. These failures are due to a problem with the LLM provider
- loc: number of lines of code in the benchmark
- num_funcs: the number of functions in the benchmark
- compilation_queries: the number of queries made to fix compilation errors
- total_queries: the total number of queries made to the LLM in the entire translation experiment
- clippy_correctness,clippy_suspicious,clippy_style,clippy_complexity,clippy_perf: the different warnings returned by clipyy for each category of warning. The value of a column is a JSON dictionary, with the key being a specific warning and the value being the # of occurences of that warning
- has_unsafe: whether the LLM translation had unsafe code or not
- translation_loc: the number of lines of code in the final translation


